// Generated by CoffeeScript 1.12.3
(function() {
  var app, bodyParser, db, express, lSt, server, sqlite3;

  express = require("express");

  bodyParser = require("body-parser");

  lSt = require("localStorage");

  sqlite3 = require("sqlite3").verbose();

  db = new sqlite3.Database("sqlite.db");

  app = express();

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.disable("x-powered-by");

  app.use(express["static"](__dirname + '/public'));

  app.set("view engine", "pug");

  app.get("/", function(req, res) {
    return res.render("list");
  });

  app.post("/send_new/alina", function(req, res) {
    var d, dtime;
    d = new Date();
    dtime = d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
    return db.serialize(function() {
      return db.run("INSERT INTO posts(text, dtime, id_use) VALUES($text, $dtime, $id_use)", {
        $text: req.body.text,
        $dtime: dtime,
        $id_use: "1"
      }, function(err) {
        if (err) {
          console.log(err);
        }
        return res.redirect("/alina");
      });
    });
  });

  app.post("/send_new/emil", function(req, res) {
    var d, dtime;
    d = new Date();
    dtime = d.getDate() + "." + d.getMonth() + "." + d.getFullYear();
    return db.serialize(function() {
      return db.run("INSERT INTO posts(text, dtime, id_use) VALUES($text, $dtime, $id_use)", {
        $text: req.body.text,
        $dtime: dtime,
        $id_use: "0"
      }, function(err) {
        if (err) {
          console.log(err);
        }
        return res.redirect("/emil");
      });
    });
  });

  app.get("/alina", function(req, res) {
    return db.serialize(function() {
      return db.all("SELECT * FROM posts WHERE id_use=1 ORDER BY id DESC", function(err, rows) {
        if (err) {
          console.log(err);
        }
        return res.render("index", {
          rows: rows,
          bl: 1
        });
      });
    });
  });

  app.get("/emil", function(req, res) {
    return db.serialize(function() {
      return db.all("SELECT * FROM posts WHERE id_use=0 ORDER BY id DESC", function(err, rows) {
        if (err) {
          console.log(err);
        }
        return res.render("index", {
          rows: rows,
          bl: 0
        });
      });
    });
  });

  app.post("/delete", function(req, res) {
    return db.serialize(function() {
      return db.run("DELETE FROM posts WHERE id=$id", {
        $id: req.body.id
      }, function(err) {
        if (err) {
          console.log(err);
        }
        return res.json({
          data: "Okay"
        });
      });
    });
  });

  server = app.listen("3000", function() {
    return console.log("Server started on the 3000 port");
  });

}).call(this);
